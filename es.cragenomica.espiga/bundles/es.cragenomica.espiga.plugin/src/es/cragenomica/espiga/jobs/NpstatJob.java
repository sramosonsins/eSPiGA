package es.cragenomica.espiga.jobs;


import com.biotechvana.workflow.ISWFJob;
import com.biotechvana.workflow.descriptors.JobLink;
import com.biotechvana.workflow.descriptors.Publication;
import com.biotechvana.workflow.descriptors.VariableDescriptor;
import com.biotechvana.workflow.descriptors.VariableDescriptor.VariableRole;
import com.biotechvana.workflow.descriptors.VariableDescriptor.VariableType;
import com.biotechvana.workflow.executer.BashBlock;
import com.biotechvana.workflow.executer.BashConditions;
import com.biotechvana.workflow.executer.BashHelper;
import com.biotechvana.workflow.executer.GeneralCMLTemplate;
import com.biotechvana.workflow.executer.IFObject;
import com.biotechvana.workflow.variables.JobVariable;

import es.cragenomica.espiga.workflow.manager.eSPiGAVariableBag;
import es.cragenomica.espiga.workflow.manager.eSPiGAWorkflowConstants;

public class NpstatJob  extends ISWFJob{ 





	static public final String JOB_ID = "npstat";
	static public final String JOB_NAME = "npstat - Population genetics for pooled NGS data";


	public static String INPUT_FILES= eSPiGAVariableBag.INPUT_FILES;
	public static String OUTPUT_FILES = eSPiGAVariableBag.OUTPUT_FILES;


	public NpstatJob() {
		super(JOB_ID, JOB_NAME, true,false);


		this.jobDesc.addLink(
				new JobLink()
				.setTitle("npstat")
				.setUrl("https://github.com/lucaferretti/npstat")
				.setType(JobLink.LinkType.Other)
				);
		this.jobDesc.addPublication(new Publication().setAuthors(
				"L. Ferretti, S.E. Ramos-Onsins and M. Perez-Enciso")
				.setTitle("Population genomics from pool sequencing")
				.setJournal("Molecular Ecology")
				//				.setVolume(22)
				//				.setIssue(3)
				.setYear(2013)
				//				.setPages("568-576")
				.setDOI("10.1111/mec.12522")
				//				.setPubmed("22300766")
				);
		this.jobDesc.setDesc("npstat: Population genetics tests and estimators for pooled NGS data \n" +
				"This code implements some population genetics tests and estimators that can be applied to pooled sequences from Next Generation Sequencing experiments. ");
	}

	@Override
	protected void createInputs() {

		// npstat [options] file.pileup
		VariableDescriptor varInputFile = VariableDescriptor.createDescriptorFor(INPUT_FILES,VariableType.File,VariableRole.Input);
		varInputFile.isRequired = true;
		varInputFile.setVariableName("Input pileup");
		varInputFile.setHelpMsg("Input pileup file for example generated by samtools mpileup");
		jobDesc.addVariable(varInputFile);
		VariableDescriptor varOptions;


		//  -n samplesize : haploid sample size
		varOptions = VariableDescriptor.Int(OPTION_AUTO, VariableRole.Input).setVariableName("Sample size")
				.setHelpMsg("Haploid sample size")
				.setCommandParamater("-n")
				.setIsRequired(true);
		jobDesc.addVariable(varOptions);
		// -l windowlength : window length
		varOptions = VariableDescriptor.Int(OPTION_AUTO, VariableRole.Input).setVariableName("Window length")
				.setHelpMsg("Window length").setCommandParamater("-l").setIsRequired(true);
		jobDesc.addVariable(varOptions);
	}

	@Override
	protected void createOutputs() {
		VariableDescriptor varOutputFile = VariableDescriptor.createDescriptorFor(OUTPUT_FILES, VariableType.File,
				VariableRole.Output);
		varOutputFile.isRequired = true;
		varOutputFile.setVariableName("output file");
		jobDesc.addVariable(varOutputFile);

	}

	@Override
	protected void createOptions() {
		VariableDescriptor varOptions;


		// -mincov minimum_coverage : filter on minimum coverage (default 4)
		varOptions = VariableDescriptor.Double(OPTION_AUTO, VariableRole.Option).setVariableName("Minimum coverage")
				.setHelpMsg("Filter on minimum coverage. Default 4").setCommandParamater("-mincov").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -maxcov maximum_coverage : filter on maximum coverage (default 100)
		varOptions = VariableDescriptor.Double(OPTION_AUTO, VariableRole.Option).setVariableName("Maximum coverage")
				.setHelpMsg("Filter on maximum coverage. Default 100").setCommandParamater("-maxcov").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -minqual minimum_base_quality : filter on base quality (default 10)
		varOptions = VariableDescriptor.Double(OPTION_AUTO, VariableRole.Option).setVariableName("Minimum base quality")
				.setHelpMsg("Filter on base quality. Default 10").setCommandParamater("-minqual").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -nolowfreq m : filter on minimum allele count mac>m
		varOptions = VariableDescriptor.Int(OPTION_AUTO, VariableRole.Option).setVariableName("Minimum allele count")
				.setHelpMsg("Filter on minimum allele count mac>m").setCommandParamater("-nolowfreq").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -outgroup file.fa : outgroup file in FASTA
		varOptions = VariableDescriptor.File(OPTION_AUTO, VariableRole.Option).setVariableName("Outgroup file")
				.setHelpMsg("Outgroup file in FASTA").setCommandParamater("-outgroup").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -annot file.gff3 : annotation file in GFF3
		varOptions = VariableDescriptor.File(OPTION_AUTO, VariableRole.Option).setVariableName("Annotation file")
				.setHelpMsg("Annotation file in GFF3").setCommandParamater("-annot").setIsRequired(false);
		jobDesc.addVariable(varOptions);
		// -snpfile file.snp : consider SNPs only if present in file.snp
		varOptions = VariableDescriptor.File(OPTION_AUTO, VariableRole.Option).setVariableName("SNP file")
				.setHelpMsg("Consider SNPs only if present in SNP file").setCommandParamater("-snpfile")
				.setIsRequired(false);
		jobDesc.addVariable(varOptions);

	}

	@Override
	protected void createRules() {
		// TODO Auto-generated method stub

	}
	
	@Override
	public boolean isValid() {
		boolean isValid = super.isValid();
		{
			String value = getVariableByCMDSwitch("-n").getValue();
			if (value != null || value!= "") {
				try {
					int sampleSize = Integer.parseInt(value);
					if (sampleSize % 2 == 1) {
						getVariableByCMDSwitch("-n").setExternalErrMsg("Sample size must be an even number");
						isValid = false;
					}
				} catch (NumberFormatException e) {
					getVariableByCMDSwitch("-n").setExternalErrMsg("Sample size must be an integer");
					isValid = false;
				}
			}
		}
		return isValid;
	}
	
	
	

	@Override
	protected void generateCommand(StringBuilder builder) {
		BashBlock command_script = new BashBlock();


		JobVariable inputVariable = getVariable(INPUT_FILES);
		JobVariable outputVariable = getVariable(OUTPUT_FILES);


		GeneralCMLTemplate mstatspop = new GeneralCMLTemplate();
		mstatspop.getBefore().addStatment(st(
				BashHelper.assign("outputFileName",BashHelper.getBaseName(inputVariable))
				));

		mstatspop.getBefore().addStatment(
				st(BashHelper.assign(outputVariable,"${outputFolder}/${outputFileName}_output.stats"))
				);
		mstatspop.setBaseCommand("npstat");

		mstatspop.setTrackInput(inputVariable);

		mstatspop.addArgs(getOptionParamatersStrAs$());
		mstatspop.addArgs(inputVariable.$());
		mstatspop.setStdForward(outputVariable.$());


		command_script.addStatment(mstatspop);
		command_script.generate(builder);
	}
}
